using System;
using Simplic.Boilerplate.Shared;
using Simplic.Framework.WebAPI.Core;
using Simplic.Boilerplate;
using System.Threading.Tasks;
using System.Web.Http;
using Swashbuckle.Swagger.Annotations;
using Unity;

namespace Simplic.PlugIn.Boilerplate.Server
{
    // TODO: We some role management here. Each role per Endpoint? Or Endpoint group?

    [Framework.WebAPI.JWTAuthorize]
    public class ContactController : ExtendedApiController
    {
        private readonly IContactService contactService;
        private readonly AutoMapper.IMapper mapper;

        public ContactController(IContactService contactService, [Dependency("BoilerplateMapper")] AutoMapper.IMapper mapper)
        {
            this.contactService = contactService;
            this.mapper = mapper;
        }

        [HttpGet]
        [SwaggerResponse(System.Net.HttpStatusCode.OK, "Returns a contact instance by id", typeof(ContactModel))]
        [SwaggerResponse(System.Net.HttpStatusCode.BadRequest, "Returns a message if the contact could not be found using the given id", typeof(string))]
        [SwaggerResponse(System.Net.HttpStatusCode.InternalServerError, "If retrieving fails due to a technical reason", typeof(Exception))]
        public async Task<IHttpActionResult> GetAsync(Guid id)
        {
            try
            {
                var contact = await contactService.GetAsync(id);

                if (contact == null)
                    return BadRequest($"Coult not find resource by id {id}");

                // Return updated contact
                return Ok(mapper.Map<ContactModel>(contact));
            }
            catch (Exception ex)
            {
                // Information hiding, what is good to return and what is bad?
                return InternalServerError(ex);
            }
        }

        [HttpPost]
        [SwaggerResponse(System.Net.HttpStatusCode.OK, "Create a new contact instance and returns the created contact", typeof(ContactModel))]
        [SwaggerResponse(System.Net.HttpStatusCode.InternalServerError, "If creating fails due to a technical reason", typeof(Exception))]
        public async Task<IHttpActionResult> CreateAsync(CreateContactRequest model)
        {
            try
            {
                var contact = mapper.Map<Contact>(model);

                // The id should be generated by the server
                contact.Id = Guid.NewGuid();

                await contactService.CreateAsync(contact);

                // Return updated contact
                return Ok(mapper.Map<ContactModel>(contact));
            }
            catch (Exception ex)
            {
                // Information hiding, what is good to return and what is bad?
                return InternalServerError(ex);
            }
        }

        [HttpPut]
        [SwaggerResponse(System.Net.HttpStatusCode.OK, "Updates an exusting contact instance and returns the created contact", typeof(ContactModel))]
        [SwaggerResponse(System.Net.HttpStatusCode.InternalServerError, "If updating fails due to a technical reason", typeof(Exception))]
        public async Task<IHttpActionResult> UpdateAsync(UpdateContactRequest model)
        {
            try
            {
                var contact = mapper.Map<Contact>(model);

                await contactService.UpdateAsync(contact);

                // Return updated contact
                return Ok(mapper.Map<ContactModel>(contact));
            }
            catch (Exception ex)
            {
                // Information hiding, what is good to return and what is bad?
                return InternalServerError(ex);
            }
        }

        [HttpDelete]
        [SwaggerResponse(System.Net.HttpStatusCode.OK, "Deletes an existing contact", typeof(DeleteContactResponse))]
        [SwaggerResponse(System.Net.HttpStatusCode.InternalServerError, "If deleting fails due to a technical reason", typeof(Exception))]
        public async Task<IHttpActionResult> DeleteAsync(Guid id)
        {
            try
            {
                // Check whether deleting is allowed
                await contactService.DeleteAsync(id);
            }
            catch (Exception ex)
            {
                // Information hiding, what is good to return and what is bad?
                return InternalServerError(ex);
            }

            return Ok(new DeleteContactResponse { Guid = id, Success = true });
        }
    }
}
